"""
3. Write a function nearly_equal to test whether two strings are nearly equal. Two strings a and b are nearly equal when a can be generated by a single mutation on b.
>>> nearly_equal('python', 'perl') 
False 
>>> nearly_equal('perl', 'pearl') 
True

"""

def nearly_equal (str_a, str_b) :
    len_a = len(str_a)
    len_b = len(str_b)

    flag = 1
    not_matched = 0

    if len_a > len_b :
        for ch in str_b :
            if ch in str_a :
                flag = 1
            else :
                not_matched += 1
                if not_matched == 2:
                    flag = 0
                    break
        if flag == 0 :
            return False
        else :
            if len_a - len_b == 1 :
                return True
            else :
                return False
    else :
        for ch in str_a :
            if ch in str_b :
                flag = 1
            else :
                not_matched += 1
                if not_matched == 2:
                    flag = 0
                    break
        if flag == 0 :
            return False
        else :
            if len_b - len_a == 1 :
                return True
            elif len_a == len_b :
                return True
            else :
                return False

print(nearly_equal('python', 'perl'))
print(nearly_equal('perl', 'pearl'))
print(nearly_equal('test', 'tast'))
